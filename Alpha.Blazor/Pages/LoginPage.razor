@page "/login"

@using Microsoft.AspNetCore.Components.Authorization
@using Alpha.Blazor.Authentication
@using System.Text.Json;
@using Alpha.Common.Identity;

@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavManager
@inject IIdentityService identityService

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="LoginUser" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (!string.IsNullOrEmpty(Message))
                {
                    <div class="alert alert-warning">@Message</div>
                }
                <div class="card">
                    <div class="card-header">Please Login</div>
                    <div class="card-body">
                        <div class="form-group">
                            <label class="form-label">User</label>
                            <InputText @bind-Value="LoginUser.Name" class="form-control"></InputText>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Password</label>
                            <InputText @bind-Value="LoginUser.Password" class="form-control" type="password" ></InputText>
                        </div>
                    </div>
                    <div class="card-footer">
                        <button type="submit" class="btn btn-primary">Login</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private AccountLogin LoginUser { get; set; } = new();
    private string? Message;
    private async Task HandleLogin()
    {
        Message = string.Empty;
        var response = await identityService.Login(LoginUser);
        if (!response.IsSuccessStatusCode)
        {
            Message = "Invalid Credentials";
            return;
        }
        
        if (response.Content is null)
        {
            Message = "Null result";
            return;
        }

        if (string.IsNullOrEmpty(response.Content.Token))
        {
            Message = "Null token";
            return;
        }

        if (string.IsNullOrEmpty(response.Content.RefreshToken))
        {
            Message = "Null refresh token";
            return;
        }

        var authenticationModel = new AuthenticationModel()
            {
                Token = response.Content.Token,
                RefreshToken = response.Content.RefreshToken,
                Username = LoginUser.Name
            };

        var customAuthStateProvider = (AlphaAuthenticationStateProvider)authStateProvider;

        var userData = await identityService.Me("Bearer "+response.Content.Token);
        if ( !userData.IsSuccessStatusCode ) 
        {
            Message = "Cant get user information";
            await customAuthStateProvider.UpdateAuthenticationState(null);
            return;
        }

        authenticationModel.Email = userData.Content.Email;
        authenticationModel.FirstName = userData.Content.FirstName;
        authenticationModel.LastName = userData.Content.LastName;
        authenticationModel.LastName = userData.Content.LastName;
        authenticationModel.Username = userData.Content.UserName;

        await customAuthStateProvider.UpdateAuthenticationState(authenticationModel);
        NavManager.NavigateTo("/");
    }
}