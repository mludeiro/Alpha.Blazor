@page "/login"

@using Microsoft.AspNetCore.Components.Authorization
@using Alpha.Blazor.Authentication
@using Alpha.Blazor.Models
@using System.Text.Json;

@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavManager
@inject IHttpClientFactory httpClientFactory

<div class="container">
    <div class="row">
        <div class="col-md-6">
            <EditForm Model="LoginUser" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (!string.IsNullOrEmpty(Message))
                {
                    <div class="alert alert-warning">@Message</div>
                }
                <div class="card">
                    <div class="card-header">Please Login</div>
                    <div class="card-body">
                        <div class="form-group">
                            <label class="form-label">User</label>
                            <InputText @bind-Value="LoginUser.User" class="form-control"></InputText>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Password</label>
                            <InputText @bind-Value="LoginUser.Password" class="form-control" type="password" ></InputText>
                        </div>
                    </div>
                    <div class="card-footer">
                        <button type="submit" class="btn btn-primary">Login</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginUser LoginUser { get; set; } = new();
    private string? Message;
    private async Task HandleLogin()
    {
        var httpClient = httpClientFactory.CreateClient(HttpClientTypes.Gateway);
        Message = string.Empty;
        var response = await httpClient.PostAsJsonAsync("api/identity/account/login", LoginUser);
        if (!response.IsSuccessStatusCode)
        {
            Message = "Invalid Credentials";
            return;
        }
        
        var text = await response.Content.ReadAsStringAsync();

        var result = JsonSerializer.Deserialize<LoginResponse>(text);

        if (result is null)
        {
            Message = "Null result";
            return;
        }

        if (string.IsNullOrEmpty(result!.Token))
        {
            Message = "Null token";
            return;
        }

        if (string.IsNullOrEmpty(result!.RefreshToken))
        {
            Message = "Null refresh token";
            return;
        }

        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", result.Token);
        var getUserClaims = await httpClient.GetAsync("api/identity/account/info");
        if (!getUserClaims.IsSuccessStatusCode) 
        {
            Message = "Cant get user information";
            return;
        }

        var userDetails = await getUserClaims.Content.ReadFromJsonAsync<UserDetails>();
        var authenticationModel = new AuthenticationModel()
            {
                Token = result.Token,
                RefreshToken = result.RefreshToken,
                Email = userDetails!.Email,
                FirstName = userDetails!.FirstName,
                LastName = userDetails!.LastName,
                Username = userDetails!.UserName
            };

        var customAuthStateProvider = (AlphaAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(authenticationModel);
        NavManager.NavigateTo("/");
    }
}